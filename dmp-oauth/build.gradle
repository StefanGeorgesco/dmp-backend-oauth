plugins {
	id 'org.springframework.boot' version '2.7.0'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id "org.flywaydb.flyway" version "7.10.0"
	id 'java'
	id 'jacoco'
}

group = 'fr.cnam.stefangeorgesco'
version = '1.1.0-SNAPSHOT'
sourceCompatibility = '15'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-mysql:8.5.12'
	implementation 'org.modelmapper.extensions:modelmapper-spring:3.1.0'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'org.keycloak:keycloak-spring-boot-starter:14.0.0'
	implementation 'org.apache.commons:commons-lang3:3.12.0'
	
	
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	
	runtimeOnly 'mysql:mysql-connector-java'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	
	testImplementation 'com.h2database:h2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

}

ext {
  dbHost = "${dbHost}"
  dbPort = "${dbPort}"
  dbSid = "${dbSid}"
  dbDriver = "com.mysql.cj.jdbc.Driver"
  dbUrl = "jdbc:mysql://${dbHost}:${dbPort}/${dbSid}?useSSL=false&serverTimezone=Europe/Paris"
  dbUser = "${dbUser}"
  dbPassword = "${dbPassword}"
}

flyway {
    url = dbUrl
    user = dbUser
    password = dbPassword
}

tasks.named('test') {
	useJUnitPlatform()
	systemProperty "file.encoding", "UTF-8"
}

test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
}

javadoc {
	options.memberLevel = JavadocMemberLevel.PRIVATE
	options.encoding = 'UTF-8'
}
